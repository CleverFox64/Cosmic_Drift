// main global script file

//=============================================================================
// INITIALIZATION
//=============================================================================

// set default game options
function set_default_options()
{
  System.Volume = 100;
  sldAudio.Value = System.Volume;
  sldSpeed.Value = 75;
  SetGameSpeed(75);

  if (IsSpeechVoxAvailable())
  {
     Speech.VoiceMode = eSpeechVoiceAndText;
     btnVoice.Text = "Voice and Text";
     sldVoice.Value = 255;
     SetSpeechVolume(255);
  }

  if (System.SupportsGammaControl)
  {
    System.Gamma = 100;
    sldGamma.Value = 100;
  }
}

// initialize gPanel
function initialize_control_panel()
{
  if (!IsSpeechVoxAvailable())
  {
    // hide the speech controls, if speech is not available
    lblVoice.Visible = false;
    btnVoice.Visible = false;
    sldVoice.Visible = false;
  }

  if (!System.SupportsGammaControl) {
    // hide the gamma control, if not supported
    sldGamma.Visible = false;
    lblGamma.Visible = false;
  }

  set_default_options();
}

// called when the game starts, before the first room is loaded
function game_start()
{
  // initialize gPanel controls
  initialize_control_panel();

  // set KeyboardMovement movement mode
  KeyboardMovement.Mode = eKeyboardMovementModeTapping;

  // set KeyboardMovement keys
  //KeyboardMovement.KeyUp = eKeyW;
  //KeyboardMovement.KeyDown = eKeyS;
  //KeyboardMovement.KeyLeft = eKeyA;
  //KeyboardMovement.KeyRight = eKeyD;

  // Auto-save on the save slot 999
  SetRestartPoint();
}

//=============================================================================
// Common GUI functions
//=============================================================================

// hide the icon bar and show a GUI
function open_gui(GUI* gui_to_open)
{
  if (gui_to_open != gInventory)
  {
    lblOverHotspot.Visible = false;
  }

  gIconbar.Visible = false;
  mouse.UseModeGraphic(eModePointer);
  gui_to_open.Visible = true;
}

// hide the GUI and show the icon bar
function close_gui(GUI* gui_to_close)
{
  gui_to_close.Visible = false;
  mouse.UseDefaultGraphic();
  lblOverHotspot.Visible = true;
  gIconbar.Visible = true;
}

// hide a GUI, based on a GUI control
function close_owning_gui(GUIControl* control)
{
  close_gui(control.OwningGUI);
}

// hide a GUI directly from an OnClick event
function close_gui_onclick(GUIControl *control, MouseButton button)
{
  if (player.Room == 1)
  //if (TitleScreen == 1) 
  {
    close_owning_gui(control);
    //TitleScreen_Other_GUI_Visibility();
    open_gui(gTitleScreen);
    gTitleScreen.Visible = true;
  
    //Other GUI
    gInventory.Visible = false;
    gStatusline.Visible = false;
    gIconbar.Visible = false;
  }
  else
  {
    close_owning_gui(control);
  }
  
  
}

function show_inventory_window()
{
  mouse.Mode = eModeInteract;
  open_gui(gInventory);
}

function show_save_game_dialog()
{
  // get the list of save games
  lstSaveGamesList.FillSaveGameList();

  if (lstSaveGamesList.ItemCount > 0)
  {
    // if there is at least one, set the default text
    // to be the first game's name
    txtNewSaveName.Text = lstSaveGamesList.Items[0];
  }
  else
  {
    // no save games yet, so default to empty text
    txtNewSaveName.Text = "";
  }

  open_gui(gSaveGame);
}

function show_restore_game_dialog()
{
  lstRestoreGamesList.FillSaveGameList();
  open_gui(gRestoreGame);
}

//=============================================================================
// ICONBAR
//=============================================================================

function btnIconSave_Click(GUIControl *control, MouseButton button)
{
  show_save_game_dialog();
}

function btnIconLoad_Click(GUIControl *control, MouseButton button)
{
  show_restore_game_dialog();
}

function btnIconPanel_Click(GUIControl *control, MouseButton button)
{
  open_gui(gPanel);
}

function btnIconExit_Click(GUIControl *control, MouseButton button)
{
  open_gui(gExitGame);
}

//=============================================================================
// INVENTORY WINDOW
//=============================================================================

function btnInvUp_Click(GUIControl *control, MouseButton button)
{
  invCustom.ScrollUp();
}

function btnInvDown_Click(GUIControl *control, MouseButton button)
{
  invCustom.ScrollDown();
}

function btnInvSelect_Click(GUIControl *control, MouseButton button)
{
  // switch to the interact cursor
  mouse.Mode = eModeInteract;
  // ...but override the appearance to look like the arrow
  mouse.UseModeGraphic(eModePointer);
}

function btnIconInv_Click(GUIControl *control, MouseButton button)
{
  show_inventory_window();
}

function btnIconCurInv_Click(GUIControl *control, MouseButton button)
{
  if (player.ActiveInventory != null)
  {
    mouse.Mode = eModeUseinv;
  }
}

//=============================================================================
// CONTROL PANEL
//=============================================================================

function btnSave_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  Wait(1);
  btnIconSave_Click(btnIconSave, eMouseLeft);
}

function btnAbout_OnClick(GUIControl *control, MouseButton button)
{
  Display("Game Created by James Branford");
  Display("%s\nAGS %s", Game.Name, System.Version);
  
}

function btnQuit_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  open_gui(gExitGame);
}

function btnLoad_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  Wait(1);
  btnIconLoad_Click(btnIconLoad, eMouseLeft);
}

function sldAudio_OnChange(GUIControl *control)
{
  System.Volume = sldAudio.Value;
}

function sldVoice_OnChange(GUIControl *control)
{
  SetSpeechVolume(sldVoice.Value);
}

function btnVoice_OnClick(GUIControl *control, MouseButton button)
{
  if (Speech.VoiceMode == eSpeechVoiceAndText)
  {
    Speech.VoiceMode = eSpeechVoiceOnly;
    btnVoice.Text = "Voice only";
  }
  else if (Speech.VoiceMode == eSpeechVoiceOnly)
  {
    Speech.VoiceMode = eSpeechTextOnly;
    btnVoice.Text = "Text only";
  }
  else if (Speech.VoiceMode == eSpeechTextOnly)
  {
    Speech.VoiceMode = eSpeechVoiceAndText;
    btnVoice.Text = "Voice and Text";
  }
}

function sldGamma_OnChange(GUIControl *control)
{
  System.Gamma = sldGamma.Value;
}

function btnDefault_OnClick(GUIControl *control, MouseButton button)
{
  set_default_options();
}

function sldSpeed_OnChange(GUIControl *control)
{
  SetGameSpeed(sldSpeed.Value);
}

//=============================================================================
// SAVE / LOAD DIALOGS
//=============================================================================

int find_save_slot(String name)
{
  bool slots[] = new bool[999];
  int slots_used = 0;

  // record which slots are occupied already, 
  // if the types save name matches any existing one, then use that
  for (int i = 0; i < lstSaveGamesList.ItemCount; i++)
  {
    if (lstSaveGamesList.Items[i] == name)
    {
      // found existing save with matching name
      return lstSaveGamesList.SaveGameSlots[i];
    }

    // remember which slots are already taken
    slots[lstSaveGamesList.SaveGameSlots[i]] = true;
    slots_used++;
  }
  
  // current version of AGS has a limit of 50 save slots
  // that may be displayed in the ListBox at the same time
  if (slots_used >= 50)
  {
    return -1;
  }

  // find first free save slot, starting with slot 1 (for "cosmetic" purposes)
  for (int i = 1; i < 999; i++)
  {
    if (!slots[i])
    {
      return i;
    }
  }

  // no free slots found
  return -1;
}

function btnSaveGame_OnClick(GUIControl *control, MouseButton button)
{
  int gameSlotToSaveInto = find_save_slot(txtNewSaveName.Text);

  if (gameSlotToSaveInto < 0)
  {
    Display("Save slots limit of 50 is reached, delete some of the existing saves first!");
  }
  else
  {
    SaveGameSlot(gameSlotToSaveInto, txtNewSaveName.Text);
    close_owning_gui(control);
  }
}

function btnRestoreGame_OnClick(GUIControl *control, MouseButton button)
{
  if (lstRestoreGamesList.SelectedIndex >= 0)
  {
    RestoreGameSlot(lstRestoreGamesList.SaveGameSlots[lstRestoreGamesList.SelectedIndex]);
  }

  close_owning_gui(control);
}

function lstSaveGamesList_OnSelectionCh(GUIControl *control)
{
  txtNewSaveName.Text = lstSaveGamesList.Items[lstSaveGamesList.SelectedIndex];
}

function txtNewSaveName_OnActivate(GUIControl *control)
{
  // pressing Return in the text box simulates clicking the save button
  btnSaveGame_OnClick(control, eMouseLeft);
}

function btnDeleteSave_OnClick(GUIControl *control, MouseButton button)
{
  if (lstSaveGamesList.SelectedIndex >= 0)
  {
    DeleteSaveSlot(lstSaveGamesList.SaveGameSlots[lstSaveGamesList.SelectedIndex]);
    lstSaveGamesList.FillSaveGameList();
  }
}

//=============================================================================
// RESTART DIALOG
//=============================================================================

function btnRestart_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  open_gui(gRestart);
}

function btnRestartYes_OnClick(GUIControl *control, MouseButton button)
{
  RestartGame();
}

//=============================================================================
// QUIT DIALOG
//=============================================================================

function btnConfirmedQuit_OnClick(GUIControl *control, MouseButton button)
{
  QuitGame(0);
}

//=============================================================================
// PLAYER INPUT
//=============================================================================

// called when a key is pressed
function on_key_press(eKeyCode keycode, int mod)
{
  // check for Escape first, so it can be used on GUIs that pause the game
  if (keycode == eKeyEscape)
  {
    if (gInventory.Visible)
    {
      // Escape will close the restore game dialog
      close_gui(gInventory);
    }
    else if (gPanel.Visible)
    {
      // Escape will turn the panel off
      close_gui(gPanel);
    }
    else if (gSaveGame.Visible)
    {
      // Escape will close the save game dialog
      close_gui(gSaveGame);
    }
    else if (gRestoreGame.Visible)
    {
      // Escape will close the restore game dialog
      close_gui(gRestoreGame);
    }
    if (gRestart.Visible)
    {
      // Escape will cancel a restart
      close_gui(gRestart);
    }
    else if (gExitGame.Visible)
    {
      // Escape will cancel exiting the game
      close_gui(gExitGame);
    }
    else
    {
      // Escape will turn the panel on
      open_gui(gPanel);
    }
  }
  else if (IsGamePaused() || !IsInterfaceEnabled())
  {
    // game paused, so don't react to any keypresses
    keycode = 0;
  }
  else if (keycode == eKeyQ && (mod & eKeyModCtrl))
  {
    // Ctrl-Q will quit the game
    open_gui(gExitGame);
  }
  else if (keycode == eKeyF5)
  {
    // F5 will prompt to save a game
    show_save_game_dialog();
  }
  else if (keycode == eKeyF7)
  {
    // F7 will prompt to save a game
    show_restore_game_dialog();
  }
  else if (keycode == eKeyF9)
  {
    // F9 will prompt to restart the game
    open_gui(gRestart);
  }
  else if (keycode == eKeyF12)
  {
    // F12 will save a screenshot to the save game folder
    SaveScreenShot("screenshot.pcx");
  }
  else if (keycode == eKeyReturn)
  {
    if (gRestart.Visible)
    {
      // Enter confirms a restart
      RestartGame();
    }
  }
  else if (keycode == eKeyTab)
  {
    // Tab opens the inventory
    show_inventory_window();
  }
  else if (mod & eKeyModCtrl)
  {
    if (keycode == eKeyS)
    {
      // Ctrl-S will give the player all defined inventory items
      Debug(0, 0);
    }
    else if (keycode == eKeyV)
    {
      // Ctrl-V will show game engine version and build date
      Debug(1, 0);
    }
    else if (keycode == eKeyA)
    {
      // Ctrl-A will show walkable areas
      Debug(2, 3);
    }
    else if (keycode == eKeyX)
    {
      // Ctrl-X will let the player teleport to any room
      Debug(3, 0);
    }
  }
}

function handle_room_click(MouseButton button)
{
  if (button == eMouseLeft)
  {
    // left-click, so try using the current mouse cursor mode at this position
    Room.ProcessClick(mouse.x, mouse.y, mouse.Mode );
  }
  else if (button == eMouseRight || button == eMouseWheelSouth){
    // right-click or mouse wheel down will cycle the mouse cursor mode forwards
    mouse.SelectNextMode();
  }
  else if (button == eMouseMiddle)
  {
    // middle-click makes the character walk to clicked area, regardless of cursor mode
    Room.ProcessClick(mouse.x, mouse.y, eModeWalkto);
  }
  else if (button == eMouseWheelNorth)
  {
    // mouse wheel up will cycle the cursor mode backwards
    mouse.SelectPreviousMode();
  }
}

function handle_inventory_click(MouseButton button)
{
  // InventoryItem.GetAtScreenXY could return null here
  // so using game.inv_activated instead is a safer option
  InventoryItem* item = inventory[game.inv_activated];
  
  if (button == eMouseLeftInv)
  {
    if (mouse.Mode == eModeInteract)
    {
      // interact mode selects an inventory item
      player.ActiveInventory = item;
    }
    else if (mouse.Mode == eModeUseinv)
    {
      if (item.ID != player.ActiveInventory.ID)
      {
        // use one item on another
        item.RunInteraction(eModeUseinv);
      }
    }
    else
    {
      // otherwise run corresponding interaction (LookAt, etc)
      item.RunInteraction(mouse.Mode);
    }
  }
  else
  {
    // right click is always "Look At"
    item.RunInteraction(eModeLookat);
  }
}

// called when a mouse button is clicked
function on_mouse_click(MouseButton button)
{
  if (button == eMouseLeftInv || button == eMouseRightInv || button == eMouseMiddleInv)
  {
    handle_inventory_click(button);
  }
  // game is paused, then don't process mouse clicks inside the room
  else if (!IsGamePaused())
  {
    handle_room_click(button);
  }
}

//=============================================================================
// GAME EVENTS
//=============================================================================

// called on every game cycle, except when the game is blocked
function repeatedly_execute()
{
}

// called on every game cycle, even when the game is blocked
function repeatedly_execute_always()
{
}

// Called when a dialog script line "run-script" is processed
function dialog_request(int param)
{
}

// called when processclick wasn't handled anywhere else
function unhandled_event (int what, int type)
{
  if (what == 1) // Unhandled events for HOTSPOTS
  {
    if (type == 1) // look
    {
      player.Say("I see nothing special about it.");
    }
    else if (type == 2) // interact
    {
      player.Say("I can't do anything with it.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("That won't do anything.");
    }
    else if (type == 4) // talk to
    {
      player.Say("I don't think it's going to talk back.");
    }
    else if (type == 7) // pick up
    {
      player.Say("I'm not sure I should be taking it.");
    }
  }
  else if (what == 2) // Unhandled events for OBJECTS
  {
    if (type == 0) // look
    {
      player.Say("Looks alright.");
    }
    else if (type == 1) // interact
    {
      player.Say("I'm not sure how to use it.");
    }
    else if (type == 2) // talk to
    {
      player.Say("I don't think it's going to answer me.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("That's a funny idea.");
    }
    else if (type == 5) // pick up
    {
      player.Say("I don't want to have it.");
    }
  }
  else if (what == 3) // Unhandled events for CHARACTERS
  {
    if (type == 0) // look
    {
      player.Say("Hm.");
    }
    else if (type == 1) // interact
    {
      player.Say("Eh?");
    }
    else if (type == 2) // talk to
    {
      player.Say("Got nothing to say.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("I don't think I should give that away.");
    }
    else if (type == 5) // pick up
    {
      player.Say("I'm not sure they would be compliant.");
    }
  }
  else if (what == 5) // Unhandled events for INVENTORY ITEMS
  {
    if (type == 0) // look
    {
      player.Say("It's just some junk in my inventory.");
    }
    else if (type == 1) // interact
    {
      player.Say("Er, no?");
    }
    else if (type == 3) // use inv on
    {
      player.Say("That's ridiculous.");
    }
  }
}

//=============================================================================
// Global interactions: Characters, Inventory items, ...
//=============================================================================

function cZeno_Look(Character *thisCharacter, CursorMode mode)
{
  //Display("Damn, I'm looking good!");
  Display("That's Zeno! He's very organized and tidy. He's also the leader of the crew and spaceship.");
}

function cZeno_Interact(Character *thisCharacter, CursorMode mode)
{
  //Display("You rub your hands up and down your clothes.");
  
}

//=============================
//Dialogl
//=============================

//Zeno Dialog
function cZeno_Talk(Character *thisCharacter, CursorMode mode)
{
  cZeno.Say("(Hmm...)");
}

//Bgo Dialog
function cBgo_Talk(Character *theCharacter, CursorMode mode)
{
  //Display("Talking to yourself is a sign of madness!");
}

//Mike Dialog
function cMike_Talk(Character *theCharacter, CursorMode mode)
{

}

function iCheese_Look(InventoryItem *theItem, CursorMode mode)
{
Display("This was the cheese you just picked up from the grass. It's a bit grassy at the bottom...");
}

function GiveScoreWithSound(int points)
{
GiveScore(points);
aChime_1.Play();
}

//function iCheese_UseInv(InventoryItem *theItem, CursorMode mode)
//{
  //if (player.ActiveInventory == iToast)
  //{
    //Display("Good Job. You Made a Grilled Cheese Sandwich!");
    //player.LoseInventory(iToast);
    //player.LoseInventory(iCheese);
    //player.AddInventory(iGrilled_Cheese_Sandwich);
    //GiveScore(10);
    //aCrafting.Play();
    //}
 // else if (player.ActiveInventory == iKey)
  //{
    //player.Say("That would just put more holes in it...");
    //GiveScore(-1);
  //}
  //else
  //{
    //player.Say("That's ridiculous.");
  //}
//}

//function iToast_UseInv(InventoryItem *theItem, CursorMode mode)
//{
  //if (player.ActiveInventory == iCheese)
  //{
    //Display("Good Job. You Made a Grilled Cheese Sandwich!");
    //player.LoseInventory(iToast);
    //player.LoseInventory(iCheese);
    //player.AddInventory(iGrilled_Cheese_Sandwich);
    //GiveScore(10);
    //aCrafting.Play();
  //}
  //else if (player.ActiveInventory == iBlueCup)
  //{
    //player.Say("That's not going to work...");
    //GiveScore(-1);
  //}
  //else
  //{
    //player.Say("That's ridiculous.");
  //}
//}

// Giving a Grilled Cheese Sandwich to Bgo
//function cBgo_UseInv(Character *theCharacter, CursorMode mode)
//{
  //if (player.ActiveInventory == iGrilled_Cheese_Sandwich)
  //{
    
  //}
//}

//================================
function GoToObjectAndPickUp (Object *pickup)
{
  
}

//function WalkToObjectAndPickup(Object *obj)
//{
    // Move player (cMonty) to the object's location
    //cMonty.Walk(obj.X, obj.Y, eBlock);  // Use eBlock to wait until the player reaches the destination
    //obj.Visible=false; // This makes the object disappear from the view.
 //}
 
 function UpdateMusic()
{
      switch (NumBadges)
      {
        case 1:
            BgMusic = aInClass_Loop_01.Play();
            break;
        case 2:
            BgMusic = aInClass_Loop_02.Play();
            break;
        case 3:
            BgMusic = aInClass_Loop_02.Play();
            break;
        default:
            // Handle other cases or do nothing
            BgMusic = aInClass_Loop_01.Play();
            break;
      }
}

//================================================= (Space Members ~ Charcters Talking [Switching there VIEW to talk]) =================================================

//Zeno Talking
function Zeno_Talking_Start()
{
  cZeno.LockView(10);
  cZeno.Animate(0, 16, eRepeat, eNoBlock);
  //cZeno.Animate(0, 5, eOnce, eBlock);
  //cEgo.UnlockView();
}

//Joel Talking
function Joel_Talking_Start()
{
  cJoel.LockView(11);
  cJoel.Animate(0, 16, eRepeat, eNoBlock);
  //cZeno.Animate(0, 5, eOnce, eBlock);
  //cEgo.UnlockView();
}

//Tyler Talking
function Tyler_Talking_Start()
{
  cTyler.LockView(12);
  cTyler.Animate(0, 16, eRepeat, eNoBlock);
  //cZeno.Animate(0, 5, eOnce, eBlock);
  //cEgo.UnlockView();
}

//Ana Talking
function Ana_Talking_Start()
{
  cAna.LockView(13);
  cAna.Animate(0, 16, eRepeat, eNoBlock);
  //cZeno.Animate(0, 5, eOnce, eBlock);
  //cEgo.UnlockView();
}

//Emma Talking
function Emma_Talking_Start()
{
  cEmma.LockView(14);
  cEmma.Animate(0, 16, eRepeat, eNoBlock);
  //cZeno.Animate(0, 5, eOnce, eBlock);
  //cEgo.UnlockView();
}

//-------------- [Dry Planet ~ Charcters Talking] --------------

//cRockCreature01
function RC01_Talking_Start()
{
  cRockCreature01.LockView(20);
  cRockCreature01.Animate(0, 16, eRepeat, eNoBlock);
  //cZeno.Animate(0, 5, eOnce, eBlock);
  //cEgo.UnlockView();
}

//cRC_Merchant
function RC_Merchant_Talking_Start()
{
  cRC_Merchant.LockView(20);
  cRC_Merchant.Animate(0, 16, eRepeat, eNoBlock);
  //cZeno.Animate(0, 5, eOnce, eBlock);
  //cEgo.UnlockView();
}


//================================================= (In the Main Spacechip) =================================================

//---------------- Joel Interactions ----------------
function cJoel_Talk(Character *theCharacter, CursorMode mode)
{
  //Talking to Joel in the Main Saceship (IN THE INTRO)
  if (MSSI_Joel == 0)
  {
    cZeno.Walk(121, 117,  eBlock,  eWalkableAreas);
    dMSS_Joel1.Start();
  }
  //Talking to Joel the second time (Telling you where the other members are.)
  else if (MSSI_Joel == 2)
  {
    dMSS_Joel2.Start();
  }
}

function cJoel_Look(Character *theCharacter, CursorMode mode)
{
Display("That's Joel! Based on his smug demeanor, it's always hard to tell when and what he is doing.");
}

//---------------- Ana Interactions ----------------
function cAna_Talk(Character *theCharacter, CursorMode mode)
{
  //Talking to Ana in the Main Saceship(IN THE INTRO)
  if (MSSI_Ana == 0)
  {
    cZeno.Walk(195, 128,  eBlock,  eWalkableAreas);
    dMSS_Ana1.Start();
  }
  //Trying to talk to Ana again.
  else if (MSSI_Ana == 2)
  {
    cZeno.Say("(Ana is about to read her book; maybe I should leave her alone for now...)");
  }
}

function cAna_Look(Character *theCharacter, CursorMode mode)
{
Display("That's Ana! She's calm and collected, always trying to make sure everybody has a good time.");
}

//---------------- Emma Interactions ----------------
function cEmma_Talk(Character *theCharacter, CursorMode mode)
{
  //Talking to Emma in the Main Saceship (IN THE INTRO)
  dMSS_Emma1.Start();
  cZeno.Walk(381, 167,  eBlock,  eWalkableAreas);
  
}

function cEmma_Look(Character *theCharacter, CursorMode mode)
{
Display("That's Emma! She's the clumsy, wild type, always trying to figure out what she should be doing at any given moment.");
}

//---------------- Tyler Interactions ----------------
function cTyler_Talk(Character *theCharacter, CursorMode mode)
{
  //Talking to Tyler in the Main Saceship (IN THE INTRO)
  if (MSSI_Tyler == 0)
  {
    cZeno.Walk(110, 168,  eBlock,  eWalkableAreas);
    dMSS_Tyler1.Start();
  }
  else if (MSSI_Tyler == 1)
  {
      Tyler_Talking_Start();
    cTyler.Say("So, did you check the front center control panel yet? Are we going the right way?");
      cTyler.UnlockView();
      
      Zeno_Talking_Start();
    cZeno.Say("Right, I should be checking that...");
      cZeno.UnlockView();
      
    cTyler.Say("*Sigh...*");
    cTyler.Say("(Come on Zeno... You're better than that...)");
    
  }
}

function cTyler_Look(Character *theCharacter, CursorMode mode)
{
Display("That's Tyler! He's very task-oriented. When something needs to be done, you know who to call when it's been finished.");
}

//================================================= (Playing as Joel: Dry Planet) =================================================

// cRockCreature01 | Room 6: Center Location | 
function cRockCreature01_Talk(Character *theCharacter, CursorMode mode)
{
 if (Joel_Expedition == 1)
 {
    dRockCreature01_Reminder.Start();
 }
 else if (Joel_Expedition == 2)
  {
    //Find somthing to make a tool
    dRockCreature01_Rock.Start();
    
    //Var Joel_Expedition to -> 3
    Joel_Expedition += 1;
    
    
  }
  
  //Check if var Joel_Expedition is value 3 (State of Progression)
  else if (Joel_Expedition == 3)
  {
    //Check if the player has the Yellow Citrc Stone and Stick in INV
    if (player.HasInventory(iDryP_Rock) && player.HasInventory(iStick))
    {
        RC01_Talking_Start();
      cRockCreature01.Say("Nice, you found a stick! And it's from one of the forests from the Violet Veils.");
      cRockCreature01.Say("Those sticks are a little bit sturdier, so this can work.");
      cRockCreature01.Say("Just give me a second to make this 'hammer.'");
        cRockCreature01.UnlockView();
        
        Joel_Talking_Start();
      cJoel.Say("No rush.");
        cJoel.UnlockView();
        
      gStatusline.Visible = false;
      gIconbar.Visible = false;
      gCutscenesBars.Visible = true;
      
      aWorkbench_Crafting.Play();
      
      //Rock Ceature Crafting
      
      // HERE! ---- > RC_Tilting.SetView(?); < ---- HERE!
      cRockCreature01.LockView(18);
      cRockCreature01.Animate(0, 10, eRepeat, eNoBlock);
      

      Wait(240);
      
      
      cRockCreature01.UnlockView(11);
      //oGCrafting_VFX.UnlockView();
      
      aSci_Fi_Notification.Play();
        
        RC01_Talking_Start();
      cRockCreature01.Say("And... there we go! Your brand new 'hammer!'");
        cRockCreature01.UnlockView();
      
      cJoel.LoseInventory(iStick);
      cJoel.LoseInventory(iDryP_Rock);
      cJoel.AddInventory(iDryP_Hammer);
      
      aSci_Fi_Fast_Good_Bleep.Play();
      Display("Joel got a 'Hammer!'");
      
        RC01_Talking_Start();
      cRockCreature01.Say("You should be able to break the rock with no problem now.");
        cRockCreature01.UnlockView();
        
        Joel_Talking_Start();
      cJoel.Say("Thank you! I greatly appreciate this.");
        cJoel.UnlockView();
        
        RC01_Talking_Start();
      cRockCreature01.Say("No problem! Happy to help!");
        cRockCreature01.UnlockView();
      
      //Var Joel_Expedition to -> 4
      Joel_Expedition += 1;
      
      
      gStatusline.Visible = true;
      gIconbar.Visible = true;
      gCutscenesBars.Visible = false;      
    }
    //If you don't have either of the 2 items then it goes to the dialogue
    else
    {
        RC01_Talking_Start();
      cRockCreature01.Say("Did you find me something I can use?");
        cRockCreature01.UnlockView();
        
        Joel_Talking_Start();
      cJoel.Say("Not yet...");
        cJoel.UnlockView();
        
        RC01_Talking_Start();
      cRockCreature01.Say("If you do, I'll be happy to make that 'hammer' of yours.");
        cRockCreature01.UnlockView();
        
        Joel_Talking_Start();
      cJoel.Say("Understood. I'll be back!");
        cJoel.UnlockView();
    }
    
  }
  
  else if (Joel_Expedition == 4)
  {
      RC01_Talking_Start();
    cRockCreature01.Say("I've done everything I can do for you. Good luck getting that water!");
      cRockCreature01.UnlockView();
  }
  
  else if (Joel_Expedition == 5)
  {
      RC01_Talking_Start();
    cRockCreature01.Say("I've done everything I can do for you. Good luck getting that water!");
      cRockCreature01.UnlockView();
  }
  
  else if (Joel_Expedition == 7)
  {
      RC01_Talking_Start();
    cRockCreature01.Say("Nice! You got the water!");
      cRockCreature01.UnlockView();
      
      Joel_Talking_Start();
    cJoel.Say("Thanks to you, I was able to get it");
      cJoel.UnlockView();
    
      RC01_Talking_Start();
    cRockCreature01.Say(" No problem, bud! Glad I was able to help!");
      cRockCreature01.UnlockView();
  }
  
}

// cRC_Merchan | Room 10: SW Location | 
function cRC_Merchant_Talk(Character *theCharacter, CursorMode mode)
{
  if (Joel_Expedition == 1)
 {
      RC_Merchant_Talking_Start();
    cRC_Merchant.Say("Busy can't talk right now.");
      cRC_Merchant.UnlockView();
    
      Joel_Talking_Start();
    cJoel.Say("Oh, Ok...");
      cJoel.UnlockView();
 }
  else if (Joel_Expedition == 2)
  {
    //Stuff
    dRC_Merchant_Reminder.Start();
  }
  
  else if (Joel_Expedition == 3)
  {
    //Stuff
    dRC_Merchant_Reminder.Start();
  }
  
  else if (Joel_Expedition == 4)
  {
    //Stuff
    //...you got a hammer,  WOW! Dialog
  }
  
  else if (Joel_Expedition == 5)
  {
    //Talking about getter the water and jug
    dRC_Merchant_Water.Start();
    
  }
  
  else if (Joel_Expedition == 6)
  {
    //Stuff
      RC_Merchant_Talking_Start();
    cRC_Merchant.Say("Remember, all you have to do is scoop some of the liquid and put the Yellow Citrc Stone in it.");
      cRC_Merchant.UnlockView();
  }
  
  else if (Joel_Expedition == 7)
  {
    //You did! You got the water.
      RC_Merchant_Talking_Start();
    cRC_Merchant.Say("Nicely done! Now you know how to get water.");
    cRC_Merchant.Say("Well at least on this planet.");
      cRC_Merchant.UnlockView();
    
      Joel_Talking_Start();
    cJoel.Say("Thanks for the help.");
      cJoel.UnlockView();
      
      RC_Merchant_Talking_Start();
    cRC_Merchant.Say("Ah, No problem!");
      cRC_Merchant.UnlockView();
    
    // ================= Stop for now, for the first Prototype of the game. =================
    
  }
  
}

//Using items on the Yellow Citrc Stone
function iYellowCitrcStone_UseInv(InventoryItem *theItem, CursorMode mode)
{
  if (player.ActiveInventory == iJugUnpurifiedWater)
  {
    cJoel.Say("(Hope this works...)");
    aMagical_Sparkle.Play();
    Wait(120);
    
    
    player.LoseInventory(iYellowCitrcStone);
    player.LoseInventory(iJugUnpurifiedWater);
    player.AddInventory(iJugCleanWater);
    
    aSci_Fi_Fast_Good_Bleep.Play();
    Display("The unpurified water turned into Clean Water!");
    
    gInventory.Visible = false;
    
      Joel_Talking_Start();
    cJoel.Say("Nice! It worked!");
    cJoel.Say("This amount of water should last me a decent amount of time.");
      cJoel.UnlockView();
    
    //Going to contact the other space members
    cJoel.Say("(Now that's over, I should see if I can contact the others.)");
    cJoel.Say("(We did get flung pretty far from the main spaceship while escaping...)");
    cJoel.Say("(I wonder if I'll be able to reach and contact them...)");
    
    //Var Joel_Expedition to -> 7
    Joel_Expedition = 7;
    
    
    aFanfare1.Play();
    Display("You have reached as far as you can go for this Demo Version of the game!");
    Display("The adventuring will continue once more stuff has been added.");
    
    gInventory.Visible = true;
    
  }
  //else if (player.ActiveInventory == iDryP_Hammer)
  //{
    //aSci_Fi_Reject_Notification
    //cJoel.Say("(I don't want to break it any further... It might ruin it...)");
    
  //}
  else
  {
      Joel_Talking_Start();
    player.Say("That's ridiculous.");
      cJoel.UnlockView();
  }
}

//Using items on the Jug Unpurified Water
function iJugUnpurifiedWater_UseInv(InventoryItem *theItem, CursorMode mode)
{
  if (player.ActiveInventory == iYellowCitrcStone)
  {
    cJoel.Say("(Hope this works...)");
    aMagical_Sparkle.Play();
    Wait(120);
    
    
    player.LoseInventory(iYellowCitrcStone);
    player.LoseInventory(iJugUnpurifiedWater);
    player.AddInventory(iJugCleanWater);
    
    aSci_Fi_Fast_Good_Bleep.Play();
    Display("The unpurified water turned into Clean Water!");
    
    gInventory.Visible = false;
    
      Joel_Talking_Start();
    cJoel.Say("Nice! It worked!");
    cJoel.Say("This amount of water should last me a decent amount of time.");
      cJoel.UnlockView();
    
    //Going to contact the other space members
    cJoel.Say("(Now that's over, I should see if I can contact the others.)");
    cJoel.Say("(We did get flung pretty far from the main spaceship while escaping...)");
    cJoel.Say("(I wonder if I'll be able to reach and contact them...)");
    
    //Var Joel_Expedition to -> 7
    Joel_Expedition = 7;
    
    aFanfare1.Play();
    Display("You have reached as far as you can go for this Demo Version of the game!");
    Display("The adventuring will continue once more stuff has been added.");
    
    gInventory.Visible = true;
    
  }
  //else if (player.ActiveInventory == iDryP_Hammer)
  //{
    //aSci_Fi_Reject_Notification
    //cJoel.Say("(Probably not a good idea to destroy the one thing that can only store water with...)");
    
  //}
  else
  {
      Joel_Talking_Start();
    player.Say("That's ridiculous.");
      cJoel.UnlockView();
  }
}

function cRockCreature01_Look(Character *theCharacter, CursorMode mode)
{
 Display("It's a living Rock creature! They're heavily known to be on this planet.");
}


//Title Screen GUI
function Button1_OnClick(GUIControl *control, MouseButton button)
{
  //Stops Title Screen Muisc
  aCinematic_Space_Drone.Stop();
  //Brings the player to the start of the game (Zeno's Room)
  cZeno.ChangeRoom(2, 68,  168, eDirectionDown);
  //Player Visiable
  cZeno.Transparency = 0;
  gTitleScreen.Visible = false;
  
  //Enable and make all the UI & Cursors Visible
  //gInventory.Visible = true;
  gStatusline.Visible = true;
  gIconbar.Visible = true;
  //Mouse.Mode = eModePointer;
  Mouse.EnableMode(eModeInteract);
  Mouse.EnableMode(eModeLookat);
}

//function TitleScreen_Other_GUI_Visibility()
//{
  //open_gui(gTitleScreen);
  //gTitleScreen.Visible = true;
  
  //Other GUI
  //gInventory.Visible = false;
  //gStatusline.Visible = false;
  //gIconbar.Visible = false;
//}

//Skip Intro Popup
function btnYes_SkipIntro_OnClick(GUIControl *control, MouseButton button)
{
  // Var ZenoGoingBackToBed_SkipIntro to -> 6
  ZenoGoingBackToBed_SkipIntro = 6;
  
  // Var Main_SS_Intro to -> 4
  Main_SS_Intro = 4;
  
  cZeno.ChangeRoom(6,  0,  0, eDirectionUp);
  
  aSpace_Chillout.Stop();
      
    gStatusline.Visible = false;
    gIconbar.Visible = false;
    gCutscenesBars.Visible = true;
  
  close_owning_gui(control);
}

function btnNO_DontSkipIntro_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  
    Zeno_Talking_Start();
  cZeno.Say("NO! No...");
  cZeno.Say("I got stuff to do...");
    cZeno.UnlockView();
      
  gIconbar.Visible = true;
}




